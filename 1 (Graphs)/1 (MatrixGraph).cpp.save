#include "AbstractGraph.h"

#include <vector>
using std::vector;


class MatrixGraph : public AbstractGraph {
public:
    MatrixGraph(int vertexCount);
    MatrixGraph(const IGraph& graph);

    virtual void AddEdge(int from, int to) override;

    virtual int VerticesCount() const override;
    virtual vector<int> GetNextVertices(int vertex) const override;
    virtual vector<int> GetPrevVertices(int vertex) const override;

private:
    vector<vector<bool>> adjacencyList;
};

MatrixGraph::MatrixGraph(int vertexCount) {
    adjacencyLists.assign(vertexCount, vector<int>(vertexCount));
}


MatrixGraph::MatrixGraph(const IGraph& graph) {
    adjacencyLists.assign(vertexCount, vector<int>(graph.VerticesCount));
    for (int from = 0; from < adjacencyLists.size(); from++)
        for (int to = 0; to < graph.GetNextVertices(from).size(); to++) = graph.GetNextVertices(from) {
            adjacencyList[from][to] = true;
        }
    }
}

void MatrixGraph::AddEdge(int from, int to) {
    if ((from < 0 || from >= adjacencyLists.size()) ||
        (to < 0 || to >= adjacencyLists.size()))
        return;

    adjacencyLists[from].push_back(to);
}

int MatrixGraph::VerticesCount() const {
    return adjacencyLists.size();
}

vector<int> MatrixGraph::GetNextVertices(int vertex) const {
    if (vertex < 0 || vertex >= adjacencyLists.size())
        throw std::exception();

    return adjacencyLists[vertex];
}

vector<int> MatrixGraph::GetPrevVertices(int vertex) const {
    if (vertex < 0 || vertex >= adjacencyLists.size())
        throw std::exception();

    vector<int> result;
    for(int from = 0; from < adjacencyLists.size(); from++) {
        for(int i = 0; i < adjacencyLists[from].size(); i++) {
            if (adjacencyLists[from][i] == vertex) {
                result.push_back(from);
                break;
            }
        }
    }
    return result;
}

void BFS(const IGraph& graph, int vertex, void (*visit)(int)) {
    vector<bool> visited(graph.VerticesCount(), false);
    queue<bool> bfsQueue;
    bfsQueue.push(vertex);
    visited[vertex] = true;

    while (bfsQueue.size() > 0) {
        int current = bfsQueue.front();
        bfsQueue.pop();
        visit(current);
        vector<int> adjacentVertices = graph.GetNextVertices();
        for (int i = 0; i < adjacentVertices; i++) {
            if (!visited[adjacentVertices[i]) {
                bfsQueue.push(adjacentVertices[i]);
                visited[adjacentVertices[i]] = true;
            }
        }
    }
}
